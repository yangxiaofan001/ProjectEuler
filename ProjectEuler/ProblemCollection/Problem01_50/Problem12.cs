using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace EulerProject.ProblemCollection
{
    public class Problem12 : ProblemBase
    {
        public override string Description
        {
            get
            {
                return "The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:\n" + 
                    "1, 3, 6, 10, 15, 21, 28, 36, 45, 55, …\n" + 
                    "Let us list the factors of the first seven triangle numbers:\n" + 
                    "1: 1\n" + 
                    "3: 1,3\n" + 
                    "6: 1,2,3,6\n" + 
                    "10: 1,2,5,10\n" + 
                    "15: 1,3,5,15\n" + 
                    "21: 1,3,7,21\n" + 
                    "28: 1,2,4,7,14,28\n" +
                    "We can see that 28 is the first triangle number to have over five divisors.\n" + 
                    "What is the value of the first triangle number to have over five hundred divisors?";
            }
        }

        public override int ProblemNumber
        {
            get
            {
                return 12;
            }
        }

        public override string Solution1()
        {
            long i = 1;
            long sum = 1;

            while (true)
            {
                i++;
                sum += i;

                if (2 * Math.Sqrt(sum) < 500) continue;

                if (Utils.NumberOfDivisors(sum) >= 500)
                {
                    return sum.ToString();
                }
            }
        }

        public override string Solution2()
        {
            long i = 1;
            long sum = 1;

            while (true)
            {
                i++;
                sum = i * (i + 1) / 2;
                if (2 * Math.Sqrt(sum) < 500) continue;
                if (Utils.NumberOfDivisors(sum) >= 500)
                {
                    return sum.ToString();
                }
            }
        }

        public override string Solution3()
        {
            long i = 1;
            long sum = 1;
            bool odd = false;

            while (true)
            {
                i++;
                odd = !odd;
                sum = i * (i + 1) / 2;

                long x1 = 0;
                long x2 = 0;

                if (odd)
                {
                    x1 = i / 2;
                    x2 = i + 1;
                }
                else
                {
                    x1 = i;
                    x2 = (i + 1) / 2;
                }

                long m = 1;
                Dictionary<int, int> primeFactors = Utils.GetPrimeFactor(x1);
                foreach (int key in primeFactors.Keys)
                    m *= primeFactors[key] + 1;

                primeFactors = Utils.GetPrimeFactor(x2);
                foreach (int key in primeFactors.Keys)
                    m *= primeFactors[key] + 1;

                if (m >= 500)
                {
                    return i.ToString() + ";" + sum.ToString();
                }
            }
        }
        
    }
}
