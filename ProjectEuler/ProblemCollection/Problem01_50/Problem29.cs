using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EulerProject.ProblemCollection
{
    public class Problem29 : ProblemBase
    {
        public override int ProblemNumber
        {
            get
            {
                return 29;
            }
        }

        public override string Description
        {
            get
            {
                return @"
                    Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

                    22=4, 23=8, 24=16, 25=32
                    32=9, 33=27, 34=81, 35=243
                    42=16, 43=64, 44=256, 45=1024
                    52=25, 53=125, 54=625, 55=3125
                    If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 
                    distinct terms:

                    4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

                    How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
                    ";
            }
        }

        long upperLimit = 100;

        public override string Solution3()
        {
            List<long> processedList = new List<long>();
            List<long> productList = new List<long>();

            for (long i = 2; i <= upperLimit; i++)
            {
                if (processedList.Contains(i)) continue;

                long root = i;
                long pow = 1;
                long product = root;
                while (product <= upperLimit)
                {
                    processedList.Add(product);

                    for (int j = 2; j <= upperLimit; j++)
                    {
                        productList.Add(root * 1000000 + pow * j);
                    }

                    product *= root;
                    pow++;
                }
            }

            return productList.Distinct().Count().ToString();
        }

        public override string Solution2()
        {
            /* 2^2 = 4, 2^3 = 8, 2^4 = 16, 2^5 = 32 2^6 64
             * 3^2 = 9, 3^3 = 27, 3^4 = 81
             * 4^2 = 16, 4^3 = 64
             * 5^2 = 25
             * 6^2 = 36
             * 7^2 = 49
             * 8^2 = 64
             * 9^2 = 81
             */

            List<long> abList= new List<long>();
            int maxSqrt = (int)(Math.Sqrt(upperLimit));
            List<int> processedList = new List<int>();

            for (int i = 2; i <= upperLimit; i++)
            {
                int root = i;
                int pow = 1;
                FindRootPow(i, ref root, ref pow);

                for (int j = 2; j <= upperLimit; j++)
                {
                    abList.Add(1000000 * root + j * pow);
                }
            }

            int total = abList.Distinct().Count();

            return total.ToString();
        }

        private void FindRootPow(int i, ref int root, ref int pow)
        {
            bool bFound = false;
            int maxSqrt = (int)(Math.Sqrt(i));
            for (root = 2; root <= maxSqrt; root++)
            {
                pow = 1;
                int product = root * pow;

                while (true)
                {
                    if (product == i)
                    {
                        bFound = true;
                        break;
                    }

                    if (product > upperLimit)
                        break;

                    product *= root;
                    pow++;
                }

                if (bFound)
                    break;
            }

            if (!bFound)
            {
                root = i;
                pow = 1;
            }
        }

        public override string Solution1()
        {
            List<string> resultList = new List<string>();

            for (int a = 2; a <= upperLimit; a++)
            {
                for (int b = 2; b <= upperLimit; b++)
                {
                    string r = "1";

                    for (int i = 0; i < b; i++)
                        r = Utils.stringMultiply(r, a);

                    if (!resultList.Contains(r))
                        resultList.Add(r);
                }
            }

            return resultList.Count.ToString();
        }
    }
}
